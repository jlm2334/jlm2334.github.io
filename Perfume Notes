<!DOCTYPE html>

<html>
<head>

<!--Styles for Paragraph Text -->
	<style type="text/css">
		
		@font-face {
			font-family:'Brittanic';
			src: url(BRITANIC.TTF);
		}
		@font-face {
				font-family:'Romantic';
				src: url(romantic.ttf);
		}
		h1{
			font-size: 42px; 
			font-family: brittanic;
			text-align: center; 
			padding-inline: 40 px;
		}
		h2{
			font-size: 30px; 
			font-family: brittanic;
			text-align: center; 
			padding-inline: 40 px;
		}
	    h3 {
	    color: #000000;
	    text-align: center;
	    font-family: arial, sans-serif;
	    padding: 1 px;
	  	}
	  	.outer {background-color:White;}
	              .outer > * {
	                display:inline-block;
	                vertical-align:middle;
	                background-color:White;
	              }
	              .one {width:25%; height:300px;}
	              .two {width:25%; height:300px;}
	              .three {width:25%; height:300px;}
		p{
			font-size: 28px;
			line-height: 125%;
			font-weight: bold;
			font-family: Romantic;
			padding-left: 0px;
			padding-right: 0px;
			margin top: auto;
			margin bottom: auto;
			text-align: justify;
			text-justify: inter-word;
		}
		ul{
			list-style-type: none;
			font-size: 28px;
			line-height: 125%;
			font-weight: bold;
			font-family: Romantic;
			padding-left: 0px;
			padding-right: 0px;
			margin top: auto;
			margin bottom: auto;
			text-align: justify;
			text-justify: inter-word
		}
		div.container1{
			height: 1080px;
			padding-left: 150px;
			padding-right: 150px;
			position: relative;
		}
		.vertical-center {
			margin: 0;
			position: relative;
			top: 50%;
			-ms-transform: translateY(-50%);
			transform:translateY(-50%);
		}
		div.container2{
			height: 1080px;
			position: relative;
		}
		.right-half {
			position: absolute;
			right: 0px;
			width: 50%;
			height: 100%;
		}
		.left-half {
			position: absolute;
			left: 0px;
			width: 50%;
			height: 100%;
		}
		.column {
		  float: left;
		  width: 33.33%;
		}
		/* Clear floats after the columns */
		.row:after {
		  content: "";
		  display: table;
		  clear: both;
		}
		#boxes {
		  content: "";
		  display: table;
		  clear: both;
		}
		#mainContainer {
		  height: 1080px;
		  position: relative;
		  height: 100%;
		  width: 100%;
		}
		#topContainer {
		  position: absolute;
		  top: 0px;
		  left: 0px;
		  bottom: 100px;
		  height: 50%;
		  width: 100%;
		}
		#bottomContainer {
		  position: absolute;
		  bottom: 0px;
		  left: 0px;
		  height: 50%;
		  width: 100%;
		}

		</style>
		
     <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="../favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <title>Gendered Notes</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

   
<script type="text/javascript" src="../d3.js"></script>
    <style>
	
	.text{
		font-family: 'brittanic';
	}
	
	.link {
		fill: none;
		stroke: #ccc;
		stroke-width: 2px;
	}

	.link.highlighted {
		stroke: #000000;

	
	.noteText{
		font-size:8px
		font-family: 'brittanic';
	}
	
	
	.perfumeText{
		font-size:8px;
		font-family: 'brittanic';
	}

    div .linechart {
		background-image: linear-gradient(red, yellow);
	  }

    </style>

	

</head>

<!--Opening Text -->

<div class=container1>
	<div class="vertical-center">
	<body>
		<h1>Gendered Fragrances</h1>
		<p >Clear gender roles in fragrance are not based in our biological
preferences but rather in cultural devices of Western society.
Gender in fragrances tend to reflect everything from characteristics
of individual scent notes to perfume stories and their
targeted marketing.</p>
		<br>
		<h1>How Fragrances Work
</h1>
		<p>Just as music is composed of musical notes and painting comprises various shades and colors, fragrances are composed of fragrance notes.  Notes are descriptors of a fragrance that can be smelled or sensed after its application.  </p>
		<ul>
			<li>e.g. Chanel No5: Rose, Jasmine, Vanilla</li>
			<li>e.g. Dior Sauvage Eau de Toilette: Bergamot, Ambroxan, Elemi, Wood, Pepper</li>
			<li>e.g. Yves Saint Laurent Mon Paris: Berries, Datura Flower, Musk, Patchouli, Chypre</li>
		</ul>
	</body>
	</div>	
</div>

<!--First Graph -->
	
<div class=container2>
<div style="text-align:center">
	<body>

	<div id="linechart" class="linechart" 
	style="background-image: rgb(255, 255, 255))";
	
	>
	</div>

<script type="text/javascript"> 
		
		//NEW: Need to name the colors for each type - some fake ones here:
		//TODO: determind what colors you want to use in each type and fill them in
		var noteTypeColors = {
			//gold and green are just commonly recognized colorwords I put in for now
			"Citrus":"Black",
			"Green":"Green",
			"Floral":"Yellow",
			"Aromatics":"Pink",
			"Fruity":"Red",
			"Balsamic":"Purple",
			"Wooded":"Brown",
			"Gourmand":"Gray",
			"Spices":"Gold",
		}
		

		//NEW: adding that note type dataset here - I added a header in the csv itself as well, it still needs some cleaning up - quotation marks etc.
		Promise.all([d3.csv("PerfumeNotes_ACCleaned.csv"),d3.csv("Perfume Notes - NoteTypes.csv")])

		.then(function(data){
			
			//NEW: organize note type into a  dictionary - see the function declaration
			//pass in data[1] which is the 2nd csv we imported above			
			var noteTypeDictionary = makeNoteTypeDictionary(data[1])
			//console.log(noteTypeDictionary)
			
			
			//this is where we are calling the function and putting the data into nodes
			var links = processDataLinks(data[0])
 			var Perfumes = processDataPerfumeNodes(data[0])
 			var NoteNodes = processDataNoteNodes(data[0])
			
			//NEW: pass in all 3 datasets so that we can draw them, and then we will also pass in our new color info
 			drawlines(links, Perfumes, NoteNodes, noteTypeDictionary)

			
		})


		function makeNoteTypeDictionary(dataset){
			//NEW: here is the dictionary we will put the note to notetype info
			var formatted = {}
			console.log(dataset)
			for(var i in dataset){
				if(dataset[i].noteType !=undefined){
					var noteType = dataset[i].noteType
					var notes = dataset[i].notes.replace("[","").replace("]","").split(",")
					console.log(noteType,notes)
					//NEW: once again we will loop through and make key value pairs
					for(n in notes){
						var note = notes[n]
						console.log(note)
						//NEW: make a match between note and notetype
						formatted[note]=noteType
					}	
					
				}
							
			}
			console.log(formatted)
			return formatted
		}

		//this function, which is called above with the csv, makes nodes between each perfume and note

		function processDataLinks(dataset){

			//console.log(dataset)
			var links = []
			for(var i in dataset){

				//console.log(i)
				var perfume = dataset[i]["Perfume Name"] 
				//console.log(perfume);
				//return perfume

		if(perfume!=undefined){ 
					var notes = dataset[i]["Notes"].replace("[","").replace("]","").split(", ")
					for(var n in notes){
						// console.log(notes[n])
						var note = notes[n]
						var link = [perfume,note]
						links.push(link)
					}
				} 		
			}
		//	console.log(links);
			return links
		}
		

		//here you can make a similar loop to make a list of perfumes
function processDataPerfumeNodes(dataset){
		perfumes = []
		for (var i in dataset){
				var perfumename = dataset[i]["Perfume Name"]
			if(perfumename!=undefined){
				perfumes.push(perfumename)
			}
		}
				console.log(perfumes)
				return perfumes
}

		//here you can make another for a list of notes
		//List of perfume nodes
function processDataNoteNodes(dataset){
		notenodes = []
		indnotes = []
		for(var i in dataset){
			if(dataset[i]["Notes"]!=undefined){
				var notes = dataset[i]["Notes"].replace("[","").replace("]","").split(", ")
				for (var n in notes) {
				var note = notes[n]
				if (notenodes.indexOf(note)==-1)
					{
					notenodes.push(notes[n])
					}
				}
			}
			
		}
		//NEW: this return statements needs to be outside of the loops so that you return the whole array, not the first only
		console.log(notenodes)		
		return notenodes
}
		


//var notenumber = 
		
				
function drawlines(linksDataset, perfumesDataset, notesDataset, typeDictionary){
	//console.log(linksDataset,perfumesDataset,notesDataset)
		//NEW I took out a portion which is drawing a test line before
			
		
			var w = 1200;
			var h = 900;
			var padding = 60;
			var svg = d3.select("#linechart")
				.append("svg")
				.attr("width",w)
				.attr("height",h);
			
			 var margin = {
				top: 15,
				right: 25,
				bottom: 15,
				left: 60
				};
				
			for (var d in linksDataset){
			
				//NEW here we want to chante the y from simply d to where the nodes will be
				//we use the index of the link source in perfumes array to set x1, and same for the link target in notes for x2
				
				//here is the name of the perfume
				var linkSource = linksDataset[d][0]
				//here is the order number of that perfume in the perfumes array
				var sourceIndex = perfumesDataset.indexOf(linkSource)
				
				//same with the notes here below
				var linkTarget = linksDataset[d][1]
				var targetIndex   = notesDataset.indexOf(linkTarget)
				
				//console.log(sourceIndex,linkSource,targetIndex, linkTarget)
				
				//NEW: adding a scale here to space out the y values
				var noteyScale = d3.scaleLinear().domain([0,77]).range([0,850])
				var perfumeyScale = d3.scaleLinear().domain([0,40]).range([0,850])
				
				svg.append('line')
					.style("stroke", "lightgreen")
					.style("stroke-width", 1)
					.attr("x1", 450)
					//let's set y1 to the index of the perfume
					.attr("y1", perfumeyScale(sourceIndex)+padding)
					.attr("x2", 750)
					//and set y2 to index of notes
					.attr("y2", noteyScale(targetIndex)+padding) 
					//NEW: lets test the colors here
					.style("stroke", function(){
						
						//NEW: our note is linkTarget
						//so our note type is 
						var noteType = typeDictionary[linkTarget]
						//console.log(noteType)
						//and our color using the color dictionary is:
						
						var color = noteTypeColors[noteType]
						//Temporary if statement here because the color dictionary doesn't have every note type yet.
						//so if the color is undefined in the dictionary, it will be grey
						if(color ==undefined){
							color ="grey"
						}
						//console.log(color)
						return color
					})
				//TITLE GOES HERE
				 svg.append("text")
				    .attr("x", w/2)
				    .attr("y", padding-40)
				    .attr("text-anchor", "middle")
					.attr("font-family", "Brittanic")
				    .style("font-size", "30px")
				    .text("Notes in Top-Selling Fragrances");
			}			
			
			
			//NEW: you can actually draw the nodes directly here in the same function, or separate it out.
			svg.selectAll(".perfumeCircles")
			.data(perfumesDataset)
			.enter()
			.append("circle")
			.attr("class","perfumeCircles")
			.attr("r",1.5)
			.attr("cx",450)
			.attr("cy",function(d,i){
				return perfumeyScale(i) +padding
			})
			
			svg.selectAll(".perfumeText")
				.data(perfumesDataset)
				.enter()
				.append("text")
				.attr("class","perfumeText")
				.attr("x",446)
				.attr("y",function(d,i){
					return perfumeyScale(i)+padding
				})
				.attr("text-anchor","end")
				.attr("font-family", "times")
				.attr("alignment-baseline","middle")
				.attr("font-size", 12)
				.text(function(d){
					return d
				})
			
			svg.selectAll(".noteCircles")
				.data(notesDataset)
				.enter()
				.append("circle")
				.attr("class","noteCircles")
				.attr("r",1.5)
				.attr("cx",750)
				.attr("cy",function(d,i){
					return noteyScale(i)+padding
					})
					
			svg.selectAll(".noteText")
				.data(notesDataset)
				.enter()
				.append("text")
				.attr("class","noteText")
				.attr("x",753)
				.attr("y",function(d,i){
					return noteyScale(i)+padding
				})
				.attr("font-size",10)
				.attr("alignment-baseline","middle")
				.attr("text-anchor", "start")
				.attr("font-family", "times")
				.attr("y",function(d,i){
					return noteyScale(i)+padding
				})
				.attr("font-color", function(){

						var noteType = typeDictionary[linkTarget]
						console.log(noteType)
						//and our color using the color dictionary is:
						
						var color = noteTypeColors[noteType]
						//Temporary if statement here because the color dictionary doesn't have every note type yet.
						//so if the color is undefined in the dictionary, it will be grey
						if(color ==undefined){
							color ="grey"
						}
						//console.log(color)
						return color
					})
				.text(function(d){
					return d
				})
			//TODO you can draw a circle and label for each of the nodes to the right in a similar way as perfumes.done
			//the difference ehre would be that that text-anchor attribute has to be set to the start, so the text is aligned differently
			//there is also some other alignment issues here, text is written from bottom up, so it is always higher than the shapes, so adding some pixels will help. 
			//the entire chart may need to be moved to get the text and graphics to fit. 
			//the colors were demonstrated in the links drawing above, use the same steps from there to set colors for nodes.
}



		</script>

	</body>
	</div>
</div>

<!--Start Second Graph -->

<div class=container2>
	<div class="left-half">
		<div class="vertical-center">
		<body>
		<h1>Gendered Notes</h1>
		<p style="padding-left:150px;padding-right:150px;padding-bottom:150px">The fragrances we researched had a wide range of notes.  Shown here is the incidence of each note in women's perfumes.  The notes are grouped into the following categories: Citrus (yellow), Aromatic (gray), Floral (pink), Green (green), Fruity (red), Spices (orange), Wooded (brown), Balsamic (purple), and Gourmand (gold).    Toggle for men's colognes.</p>
		</body>
		</div>
	</div>
	
	<div class="right-half">
	<div style="text-align:center;">
	<body>
	
	<!-- Add 2 buttons -->

	<div id="Gender_data"></div>
	
		<script type="text/javascript">

		var noteTypeColors = {
                "Citrus":"rgb(247,218,51)",
                "Green":"rgb(75,183,73)",
                "Floral":"rgb(237,151,192)",
                "Fruity":"rgb(205,26,110)",
                "Balsamic":"rgb(135,99,171)",
                "Wooded":"rgb(183,123,105)",
                "Gourmand":"rgb(209,162,42)",
                "Spices":"rgb(240,81,72)",
            }


		// set the dimensions and margins of the graph
		var margin = {top: 20, right: 90, bottom: 40, left: 90},
			width = 500 - margin.left - margin.right,
			height = 850 - margin.top - margin.bottom;

		// append the svg object to the body of the page
		var svg = d3.select("#Gender_data")
		  .append("svg")
			.attr("width", width + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
		  .append("g")
			.attr("transform",
				  "translate(" + margin.left + "," + margin.top + ")");
		

			

		d3.csv("Perfume Notes - Gendered Notes.csv")
			.then(function(data){
				console.log("data:"); console.log(data)

			var x = d3.scaleLinear()
				.domain([0, 15])
				.range([ 0, width]);
			svg.append("g")
				.attr("transform", "translate(0," + height + ")")
				.call(d3.axisBottom(x))
				.selectAll("text")
				.style("font-family", "times")
				.style("text-anchor", "end");
			// Y axis
			var y = yscale(data);
			function yscale(dataInput) {
				return d3.scaleBand()
				.range([ 0, height ])
				.domain(dataInput.map(function(d) { return d.Notes; }))
				.padding(.1);
			}
			var yaxisG = svg.append("g");
			yaxisG.call(d3.axisLeft(y))
				.on("click", null)

			//Creating Initial Bars
			  svg.selectAll("myRect")
				.data(data)
				.enter()
				.append("rect")
				.attr("x", x(0) )
				.attr("y", function(d) { return y(d.Notes); })
				.attr("width", function(d) { return x(d.Women); })
				.attr("height", y.bandwidth() )
				.attr("fill", function(d){
					console.log(noteTypeColors)
                    var color = noteTypeColors[d.Type]
					console.log(color)
						if(color ==undefined){
							color ="grey"
						}
						return color
					})
				
	//});
				//node.sort(comparator) two nodes
		//Male Dataset begins here. Trying to substitute the male data for female data. 
		//d3.select("p"
		var display = "Women"; //need to remember what is the current display
		

		var isAscending = false; //true is to sort in ascending order, false in descending order
		
		function displaySortedNotes() {
			console.log("In displaySortedNotes, event node: ");console.log(this);

			console.log("data before sort: ");console.log(data);
			var sortedData = data.slice(); //make a copy of data so the original data is not touched. Otherwise, sorting will destroy the original order of data
			sortedData.sort(function(d1, d2) {
				return (isAscending ? d1[display] - d2[display] : d2[display] - d1[display])
			})
			console.log("data after sort: ");console.log(data);
			console.log("in displaySortedNotes sortedData by: " + display);console.log(sortedData);
			var notes = d3.select(this).selectAll("text").data(sortedData).text(function(d) {
				console.log("In displaySortedNotes text: ");console.log(d.Notes);
				return d.Notes;})
			console.log("in displaySortedNotes notes: " + display);console.log(notes);
			sortedYscale = yscale(sortedData);
				//d3.scaleBand()
				//.range([ 0, height ])
				//.domain(sortedData.map(function(d) { return d.Notes; }))
				//.padding(.1);
			displayBars(sortedData, sortedYscale);
		}
		

		function displayNextType() {
			console.log("In displayNextType node: ");console.log(this);
			console.log("In displayNextType data: ");console.log(data);
			//console.log("clicked bar: ");console.log(this);
			//var dataset = data.Men
			if (display == "Women") {
				display = "Men";
			} 
			//else if (display == "Men") {
			//	display = "Women";
			//}
			displayGenderType(display)
		}

		function displayGenderType(gender) {
			var rectNode = d3.select(this);
			console.log("In displayNextType rectNode: ");console.log(rectNode);
			var notes = yaxisG.selectAll("text").data(data).text(function(d) {
				console.log("In displayNextType text: ");console.log(d.Notes);
				return d.Notes;})
			displayBars(data, y, gender); //original data
			isAscending = false;
		}

		function displayBars(displayData, newYscale, gender) {

				//Update all rects
				console.log("in displayBars. displayData for " + gender + "with isAscending " + isAscending + ":");console.log(displayData);
				svg.selectAll("rect").remove();
				//Bars
				svg.selectAll("myRect")
				.data(displayData)
				.enter()
				.append("rect")
				.attr("x", x(0) )
				.attr("y", function(d) { return newYscale(d.Notes); })
				//When I substitute dataset for d.Women, it workd fine. 
				.attr("width", function(d) { return x(d[gender]); })
				.attr("height", newYscale.bandwidth() )
				.attr("fill", function(d){
					console.log(noteTypeColors)
                    var color = noteTypeColors[d.Type]
					console.log(color)
						if(color ==undefined){
							color ="grey"
						}
						return color
					});
				svg.selectAll("rect").on("click", displayNextType);
			   //.data(dataset)
					   //.attr("y", function(d) {
					   //		return h - yScale(d);
					   //})
					   //.attr("height", function(d) {
					   //		return yScale(d);
					   //});
		}
		svg.selectAll("rect").on("click", displayNextType);

		var svg2 = d3.select("#Gender_data")
		  .append("svg")
			.attr("width", 800)
			.attr("height", 200)
		  .append("g")
		  svg2.append("text")
			.attr("x",200)
			.attr("y",0)
			.attr("font-family","brittanic")
			.text("Women").on("click", function(){
				console.log("clickwomen")
			displayGenderType("Women")
			})
			.attr("transform",
				  "translate(" + margin.left + "," + margin.top + ")");
		  svg2.append("text")
			.attr("x",350)
			.attr("y",0)
			.attr("font-family","brittanic")
			.text("Men").on("click", function(){
			displayGenderType("Men")
			})
			.attr("transform",
				  "translate(" + margin.left + "," + margin.top + ")");
	});		
		</script>
	</body>
	</div>
	</div>
</div>

<!--Start Third Graph-->

<div class=container2>
			<body><div id="container"  style="padding-left:200px, padding-right:200px, width: 100%">
<div id = "text" >
    <h1>Gendered Scents</h1>
    <p style="padding-left:150px;padding-right:150px">Do fragrances condition women to clean more than men? 
        Women's perfumes are floral while men are woody, closely followed by citrus.
        To test this theory, we surveyed the 20 most popular cleaning products including Clorox, Dawn, and Tide. 
        The most popular notes in cleaning products are citrus scents, closely followed
        by floral scents. 
	</p>

</div>

<div style="height:10px"></div>
<div>
<div class="outer">
	
	<div class="one" id="female_piechart">
        <h2>Female Perfumes</h2>
    </div>
    <div class="two" id="male_piechart">
        <h2>Male Perfumes</h2>
    </div>

    <div class="three" id="cleaning_piechart">
        <h2>Cleaning Products</h2>
    </div>
</div>



<script type="text/javascript">

	// set the dimensions and margins of the graph
var widthPieChart = 475
    h = 225
    marginPieChart = 60

var colorrange = ["rgb(247,218,51)", "rgb(237,151,192)", "rgb(75,183,73)", "rgb(2015,26,110)", "rgb(240,81,72)", "rgb(183,123,105)", "rgb(135,99,171)", "rgb(209,162,42)" ]

var textsize = ["10"]
var font = ["sans-serif"]
var fill = ["black"]


// The radius of the pieplot is half the widthPieChart or half the h (smallest one). I subtract a bit of marginPieChart.
var radiusPieChart = Math.min(widthPieChart, h) / 2 - marginPieChart

// append the svg object to the div called 'my_dataviz'
var svg3 = d3.select("#female_piechart")
            .append("svg")
                .attr("widthPieChart", widthPieChart)
                .attr("h", h)

            .append("g")
                .attr("transform", "translate(" + widthPieChart / 2.25 + "," + h / 3 + ")");

            // Create dummy data
            var femaledata = {Citrus: 6, Floral: 45, Green:2, Fruity:8, Spices:0, Wooded:11, Balsamic:11, Gourmand: 15 }
            
            // set the color scale
            var color = d3.scaleOrdinal()
            .domain(femaledata)
            .range(colorrange)
            console.log(color)

            // Compute the position of each group on the pie:
            var pie = d3.pie()
            .value(function(d) {return d.value; })
            var data_ready = pie(d3.entries(femaledata))
            console.log(data_ready)
            //Now I know that group A goes from 0 degrees to x degrees and so on.

            // shape helper to build arcs:
            var arcGenerator = d3.arc()
            .innerRadius(0)
            .outerRadius(radiusPieChart)

            var outerArc = d3.arc()
                .innerRadius(radiusPieChart * 0.9)
                .outerRadius(radiusPieChart * 0.9)

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            svg3
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('path')
                .attr('d', arcGenerator)
                .attr('fill', function(d){ return(color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-widthPieChart", ".5px")
                .style("opacity", 0.8)
                

            // Now add the annotation. Use the centroid method to get the best coordinates
            svg3
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function(d){return d.data.value > 0 ? d.data.key : ""})
            .attr("transform", function(d) { 
                var c = arcGenerator.centroid(d);
                var x = 2.8, y = 2.2;
                    if (d.data.key == "Citrus" || d.data.key == "Green" ) {
                        x = 2.8; //1.8
                        y = 2.3; //1.2
                    }
                    if (d.data.key == "Citrus"  ) {
                        x = 3.0; //1.8
                        y = 2.3; //1.2
                    }
                    if (d.data.key == "Gourmand" ) {
                        x = 2.8; //1.8
                        y = 2.6; //1.2
                    }
                    if (d.data.key == "Floral" ) {
                        x = 2.4; //1.8
                        y = 1; //1.2
                    }
                    return "translate(" + c[0]*x +"," + c[1]*y + ")";
                    })
            .style("text-anchor", "middle")
            .style("font-size", textsize)
                .attr("font-family", font)
                .attr("fill", fill);


  var svg3 = d3.select("#male_piechart")
            .append("svg")
                .attr("widthPieChart", widthPieChart)
                .attr("h", h)
            .append("g")
                .attr("transform", "translate(" + widthPieChart / 2.25 + "," + h / 3 + ")");

            // Create dummy data
            var femaledata = {Citrus: 20, Floral: 23, Green:13, Fruity:5, Spices:11, Wooded:25, Balsamic:11, Gourmand: 7 }

            // set the color scale
            var color = d3.scaleOrdinal()
            .domain(femaledata)
            .range(colorrange)
            console.log(color)

            // Compute the position of each group on the pie:
            var pie = d3.pie()
            .value(function(d) {return d.value; })
            var data_ready = pie(d3.entries(femaledata))
            console.log(data_ready)
            //Now I know that group A goes from 0 degrees to x degrees and so on.

            // shape helper to build arcs:
            var arcGenerator = d3.arc()
            .innerRadius(0)
            .outerRadius(radiusPieChart)

            var outerArc = d3.arc()
                .innerRadius(radiusPieChart * 0.9)
                .outerRadius(radiusPieChart * 0.9)

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            svg3
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('path')
                .attr('d', arcGenerator)
                .attr('fill', function(d){ return(color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-widthPieChart", ".5px")
                .style("opacity", 0.8)

            // Now add the annotation. Use the centroid method to get the best coordinates
            svg3
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function(d){ return d.data.key})
            .attr("transform", function(d) { 
                var c = arcGenerator.centroid(d);
                var x = 2.8, y = 2.2;
                    if (d.data.key == "Citrus"  ) {
                        x = 3.0; //1.8
                        y = 2.4; //1.2
                    }
                    return "translate(" + c[0]*x +"," + c[1]*y + ")";
                    })
            .style("text-anchor", "middle")
            .style("font-size", textsize)
                .attr("font-family", font)
                .attr("fill", fill);



  var svg3 = d3.select("#cleaning_piechart")
            .append("svg")
                .attr("widthPieChart", widthPieChart)
                .attr("h", h)
            .append("g")
                .attr("transform", "translate(" + widthPieChart / 2.25 + "," + h / 3 + ")");

            // Create dummy data
            var femaledata = {Citrus: 27, Floral: 28, Green:3, Fruity:24, Spices:1, Wooded:1, Balsamic:2, Gourmand:5 }

            // set the color scale
            var color = d3.scaleOrdinal()
            .domain(femaledata)
            .range(colorrange)
            console.log(color)

            // Compute the position of each group on the pie:
            var pie = d3.pie()
            .value(function(d) {return d.value; })
            var data_ready = pie(d3.entries(femaledata))
            console.log(data_ready)
            //Now I know that group A goes from 0 degrees to x degrees and so on.

            // shape helper to build arcs:
            // The arc generator
            var arc = d3.arc()
                .innerRadius(radiusPieChart * 0.0)         // This is the size of the donut hole
                .outerRadius(radiusPieChart * 0.8)

            var outerArc = d3.arc()
                .innerRadius(radiusPieChart * 0.9)
                .outerRadius(radiusPieChart * 0.9)

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            svg3
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('path')
                .attr('d', arcGenerator)
                .attr('fill', function(d){ return(color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-widthPieChart", ".5px")
                .style("opacity", 0.8)
                

            // Now add the annotation. Use the centroid method to get the best coordinates
            svg3
            .selectAll('mySlices')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function(d){ return d.data.key})
            .attr("transform", function(d) { 
                var c = arcGenerator.centroid(d);
                var x = 2.8, y = 2.2;
                    if (d.data.key == "Wooded" ) {
                        x = -15.1; //1.8
                        y = 2.15; //1.2
                    }
                    if (d.data.key == "Citrus"  ) {
                        x = 3.0; //1.8
                        y = 2.3; //1.2
                    }
                    if (d.data.key == "Green"  ) {
                        x = 4.1; //1.8
                        y = 2.05; //1.2
                    }
                    if (d.data.key == "Balsamic" ) {
                        x = 4.6; //1.8
                        y = 2.2; //1.2
                    }                    
                    if (d.data.key == "Gourmand" ) {
                        x = 3.6; //1.8
                        y = 1.8; //1.2
                    }
                    if (d.data.key == "Spices" ) {
                        x = 2.4; //1.8
                        y = 2.4; //1.2
                    }
                    return "translate(" + c[0]*x +"," + c[1]*y + ")";
                    })
            .style("text-anchor", "middle")
            .style("font-size", textsize)
                .attr("font-family", font)
                .attr("fill", fill);




		</script>
			</body>
</div>









</html>
